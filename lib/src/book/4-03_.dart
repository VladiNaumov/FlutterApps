// Импортируем библиотеку Flutter для работы с виджетами и Material Design
import 'package:flutter/material.dart';

// Точка входа в приложение: запускает приложение, вызывая MyApp
void main() => runApp(const MyApp());

// Основной класс приложения, наследуется от StatelessWidget (неизменяемый виджет)
class MyApp extends StatelessWidget {
  // Конструктор с ключом для идентификации виджета
  const MyApp({super.key});

  // Метод build определяет структуру пользовательского интерфейса
  @override
  Widget build(BuildContext context) {
    // MaterialApp - корневой виджет приложения, задает основные настройки
    return MaterialApp(
      title: 'DataTable Demo', // Заголовок приложения для системного интерфейса
      theme: ThemeData(
        useMaterial3: true, // Включаем Material 3 для современного дизайна (совместимо с Flutter 3.32.0)
      ),
      home: Scaffold(
        // Scaffold - базовая структура экрана с поддержкой Material Design
        body: Column(
          // Column - располагает дочерние элементы вертикально
          children: [
            // Container - создает пустое пространство высотой 100 пикселей
            Container(height: 100),
            // DataTable - виджет для создания таблицы с сортируемыми столбцами
            DataTable(
              sortColumnIndex: 1, // Индекс столбца для сортировки (здесь "Last Name")
              // Список столбцов таблицы
              columns: [
                // DataColumn - определяет заголовок столбца
                DataColumn(label: Text("First Name")), // Столбец для имени
                DataColumn(label: Text("Last Name")), // Столбец для фамилии
              ],
              // Список строк таблицы
              rows: [
                // DataRow - строка таблицы, содержащая ячейки
                DataRow(cells: [
                  // DataCell - ячейка таблицы
                  DataCell(Text("Leia")), // Ячейка с текстом "Leia"
                  DataCell(Text("Organa"), showEditIcon: true), // Ячейка с текстом "Organa" и иконкой редактирования
                ]),
                DataRow(cells: [
                  DataCell(Text("Luke")), // Ячейка с текстом "Luke"
                  DataCell(Text("Skywalker")), // Ячейка с текстом "Skywalker"
                ]),
                DataRow(cells: [
                  DataCell(Text("Han")), // Ячейка с текстом "Han"
                  DataCell(Text("Solo")), // Ячейка с текстом "Solo"
                ]),
              ],
            ),
          ],
        ),
      ),
    );
  }
}

/*
тот код создает простое Flutter-приложение, которое отображает экран с вертикальной колонкой (Column), содержащей:
Пустое пространство:
Пространство высотой 100 пикселей, созданное с помощью Container.

Таблица данных:
Таблица (DataTable) с двумя столбцами: "First Name" (Имя) и "Last Name" (Фамилия).

Таблица содержит три строки с данными:
Leia Organa (с иконкой редактирования в ячейке фамилии).

Luke Skywalker.

Han Solo.

Столбец "Last Name" помечен как сортируемый (sortColumnIndex: 1), но для полной функциональности сортировки требуется дополнительная логика (например, обработка onSort).

Приложение использует базовую структуру Material Design через MaterialApp и Scaffold. Таблица (DataTable) предназначена для отображения структурированных данных в виде сетки с возможностью добавления интерактивных элементов, таких как иконка редактирования.
Методы и виджеты: За что отвечают
MaterialApp:
Корневой виджет приложения, задает настройки, такие как заголовок (title), тема (theme) и начальный экран (home).

title: отображается в системном интерфейсе (например, в панели задач).

theme: задает глобальную тему (здесь включен Material 3 через useMaterial3: true).

home: определяет главный экран приложения.

ThemeData:
Определяет тему приложения.

useMaterial3: true: включает стили Material 3, совместимые с Flutter 3.32.0.

Scaffold:
Предоставляет базовую структуру экрана Material Design.

body: содержит основной контент (здесь Column).

Column:
Располагает дочерние виджеты вертикально.

Используется для размещения Container и DataTable.

Container:
Универсальный виджет для компоновки и стилизации.

Здесь создает пустое пространство высотой 100 пикселей (height: 100).

DataTable:
Виджет для создания таблицы с сортируемыми столбцами и строками.

sortColumnIndex: указывает индекс столбца, который отображается как сортируемый (здесь 1, то есть "Last Name").

columns: список DataColumn для заголовков столбцов.

rows: список DataRow для строк таблицы.

DataColumn:
Определяет заголовок столбца.

label: виджет для отображения заголовка (здесь Text).

DataRow:
Представляет строку таблицы.

cells: список DataCell для ячеек строки.

DataCell:
Представляет ячейку таблицы.

showEditIcon: true: добавляет иконку редактирования (карандаш) рядом с содержимым ячейки.

Содержит виджет, например, Text для отображения данных.

Text:
Отображает текст в заголовках столбцов или ячейках.


* */